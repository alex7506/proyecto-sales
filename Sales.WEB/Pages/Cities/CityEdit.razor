@page "/cities/edit/{CityId:int}"

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Ciudad</h3>

@if (city is null)
{
    <p>Cargando...</p>
}
else
{
    <CitiesForm @ref="citiesForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private City? city;
    private CitiesForm? citiesForm;

    [Parameter]
    public int CityId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<City>($"api/cities/{CityId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo($"/countries");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        city = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.PutAsync("api/cities", city);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        citiesForm!.FormPostedSuccessfully = true;
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Ciudad modificada con éxito.");
    }

    private void Return()
    {
        navigationManager.NavigateTo($"/states/details/{city!.StateId}");
    }
}